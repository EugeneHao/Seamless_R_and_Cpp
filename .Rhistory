bookdown::render_book()
bookdown::render_book()
bookdown::publish_book(account = "eugenesun95")
bookdown::render_book()
bookdown::publish_book(account = "eugenesun95")
bookdown::publish_book(account = "eugenesun95")
bookdown::render_book()
bookdown::render_book()
getwd()
bookdown::render_book()
bookdown::publish_book(account = "eugenesun95")
bookdown::render_book()\
bookdown::render_book()
bookdown::publish_book(account = "eugenesun95")
bookdown::render_book()
bookdown::publish_book(account = "eugenesun95")
bookdown::render_book()
bookdown::publish_book(account = "eugenesun95")
mfibR <- local({
memo <- c(1, 1, rep(NA, 1000))
f <- function(x) {
if (x == 0) return(0)
if (x < 0) return(NA)
if (x > length(memo))
stop("x too big for implementation")
if (!is.na(memo[x])) return(memo[x])
ans <- f(x-2) + f(x-1)
memo[x] <<- ans
ans
}
})
mfibR(40)
mfibR(100)
mfibR(80)
?local
mincltxt<- '
#include <algorithm>
#include <vector>
#include <stdexcept>
#include <cmath>
#include <iostream>
class Fib {
public:
Fib(unsigned int n = 1000) {
memo.resize (n);     // reserve n elements
std::fill ( memo.begin(), memo.end (), NAN );     // set to NaN
memo[0] = 0.0;      // initialize for
memo[1] = 1.0;      // n=0 and n=1
}
double fibonacci(int x)  {
if (x < 0)   // guard against bad input
return ( (double) NAN );
if (x >= (int) memo.size() )
throw std::range_error(\"x too large for implementation\");
if ( ! ::isnan(memo[x] ))
return (memo[x]) ;   // if exist, reuse values
// build precomputed value via recursion
memo[x] = fibonacci(x-2) + fibonacci(x-1) ;
return ( memo[x] ) ;    // and return
}
private:
std::vector< double > memo ;  // internal memory for precomp.
}
'
mfibRcpp <- cxxfunction(signature(xs="int"),
plugin="Rcpp", includes=mincltxt,
body='
int x = Rcpp::as<int>(xs);
Fib f;
return Rcpp::wrap( f.fibonacci(x-1) );
')
library(inline)
mfibRcpp <- cxxfunction(signature(xs="int"),
plugin="Rcpp", includes=mincltxt,
body='
int x = Rcpp::as<int>(xs);
Fib f;
return Rcpp::wrap( f.fibonacci(x-1) );
')
mincltxt<- '
#include <algorithm>
#include <vector>
#include <stdexcept>
#include <cmath>
#include <iostream>
class Fib {
public:
Fib(unsigned int n = 1000) {
memo.resize(n);     // reserve n elements
std::fill( memo.begin(), memo.end(), NAN );     // set to NaN
memo[0] = 0.0;      // initialize for
memo[1] = 1.0;      // n=0 and n=1
}
double fibonacci(int x)  {
if (x < 0)   // guard against bad input
return ( (double) NAN );
if (x >= (int) memo.size() )
throw std::range_error(\"x too large for implementation\");
if ( ! ::isnan(memo[x]))
return (memo[x]) ;   // if exist, reuse values
// build precomputed value via recursion
memo[x] = fibonacci(x-2) + fibonacci(x-1) ;
return ( memo[x] ) ;    // and return
}
private:
std::vector< double > memo ;  // internal memory for precomp.
};
'
mfibRcpp <- cxxfunction(signature(xs="int"),
plugin="Rcpp", includes=mincltxt,
body='
int x = Rcpp::as<int>(xs);
Fib f;
return Rcpp::wrap( f.fibonacci(x-1) );
')
rbenchmark::benchmark(fibR(20), fibRcpp(20), mfibR(20), mfibRcpp(20))
library(Rcpp)
library(inline)
setwd("~/Documents/GitHub/Seamless_R_and_Cpp/")
fibR <- function(n) {
if (n == 0) return(0)
if (n == 1) return(1)
return (fibR(n - 1) + fibR(n - 2))
}
# require Rcpp, inline
incltxt <- '
int fibonacci(const int x) {
if (x == 0) return(0);
if (x == 1) return(1);
return fibonacci(x - 1) + fibonacci(x - 2);
}
'
fibRcpp <- cxxfunction(signature(xs="int"),
plugin="Rcpp",
incl=incltxt,
body='
int x = Rcpp::as<int>(xs) ;
return Rcpp::wrap( fibonacci(x) ) ;
')
rbenchmark::benchmark(fibR(20), fibRcpp(20), mfibR(20), mfibRcpp(20))
rbenchmark::benchmark(fibRcpp(40), mfibR(40), mfibRcpp(40))
rbenchmark::benchmark(fibRcpp(30), mfibR(30), mfibRcpp(30))
fibRiter<-function(n){
first <- 0
second <- 1
third <- 0
for (i in seq_len(n)) {
third <- first + second
first <- second
second <- third
}
return(first)
}
fibRiter(20)
fibRiter<-function(n){
first <- 0
second <- 1
third <- 0
for (i in seq_len(n)) {
third <- first + second
first <- second
second <- third
}
return(first)
}
fibRcppIter<-cxxfunction(signature(xs="int"), plugin="Rcpp",
body='
int n = Rcpp::as<int>(xs);
double first = 0;
double second = 1;
double third = 0;
for (int i=0; i<n; i++) {
third = first + second;
first = second;
second = third;
}
return Rcpp::wrap(first);
')
rbenchmark::benchmark(mfibR(30), mfibRcpp(30), fibRiter(30), fibRcppIter(30))
rbenchmark::benchmark(mfibR(50), mfibRcpp(50), fibRiter(50), fibRcppIter(50))
rbenchmark::benchmark(mfibR(100), mfibRcpp(100), fibRiter(100), fibRcppIter(100))
bookdown::render_book()
##parameter and error terms used through out
a <- matrix(c(0.5,0.1,0.1,0.5),nrow=2)
u <- matrix(rnorm(10000),ncol=2)
##Letâ€™s start with the Rversion
rSim <- function(coeff, errors) {
simdata <- matrix(0, nrow(errors), ncol(errors))
for (row in 2:nrow(errors)) {
simdata[row,] = coeff %*% simdata[(row-1),] + errors[row,]
}
return(simdata)
}
rData <- rSim(a, u)
dim(rData)
plot(rData[,1])
plot(rData[,1], rData[,2])
code <- '
arma::mat coeff = Rcpp::as<arma::mat>(a);
''
'
code <- '
arma::mat coeff = Rcpp::as<arma::mat>(a);
arma::mat errors = Rcpp::as<arma::mat>(u);
int m = errors.n_rows;
int n = errors.n_cols;
arma::mat simdata(m,n);
simdata.row(0) = arma::zeros<arma::mat>(1,n);
for (int row=1; row<m; row++) {
simdata.row(row) = simdata.row(row-1)*trans(coeff) + errors.row(row);
}
return Rcpp::wrap(simdata);
'
## create the compiled function
rcppSim <- cxxfunction(signature(a="numeric",u="numeric"),
code, plugin="RcppArmadillo")
rcppData <- rcppSim(a,u)              # generated by C++ code
stopifnot(all.equal(rData, rcppData)) # checking results
stopifnot(all.equal(rData, rcppData))
head(rData)
head(rcppData)
?cxxfunction
bookdown::render_book()
bookdown::render_book()
bookdown::render_book()
bookdown::render_book()
bookdown::publish_book()
bookdown::render_book()
bookdown::publish_book()
