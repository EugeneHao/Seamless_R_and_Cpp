[["index.html", "Notebook of Seamless R and C++ Integration with Rcpp Chapter 1 Introduction", " Notebook of Seamless R and C++ Integration with Rcpp Hao Sun 2022-05-24 Chapter 1 Introduction The author makes some notes for Seamless R and C++ Integration with Rcpp written by Dirk Eddelbuettel in this notebook. This book is only for the author’s personal use only. "],["a-gentle-introduction-to-rcpp.html", "Chapter 2 A Gentle Introduction to Rcpp 2.1 Background: From R to C++ 2.2 A First Example", " Chapter 2 A Gentle Introduction to Rcpp 2.1 Background: From R to C++ xx &lt;- faithful$eruptions fit1 &lt;- density(xx) fit2 &lt;- replicate(1000, { x &lt;- sample(xx, replace=TRUE); density(x, from=min(fit1$x), to=max(fit1$x))$y }) fit3 &lt;- apply(fit2, 1, quantile, c(0.025,0.975)) plot(fit1, ylim=range(fit3)) polygon(x = c(fit1$x, rev(fit1$x)), y = c(fit3[1,], rev(fit3[2,])), col=&#39;grey&#39;, border=F) lines(fit1) Note: use replicate to reproduce some complicate function use polygon to plot confidence interval of a function and fill the polygon by grey. 2.2 A First Example The Fibonacci sequence \\(F_n\\) is defined by \\(F_n = F_{n-1} + F_{n-2}\\) with 2 initial conditions \\(F_0 = 0\\) and \\(F_1 = 1\\). 2.2.1 R solution fibR &lt;- function(n) { if (n == 0) return(0) if (n == 1) return(1) return (fibR(n - 1) + fibR(n - 2)) } 2.2.2 C++ solution # require Rcpp, inline incltxt &lt;- &#39; int fibonacci(const int x) { if (x == 0) return(0); if (x == 1) return(1); return fibonacci(x - 1) + fibonacci(x - 2); } &#39; fibRcpp &lt;- cxxfunction(signature(xs=&quot;int&quot;), plugin=&quot;Rcpp&quot;, incl=incltxt, body=&#39; int x = Rcpp::as&lt;int&gt;(xs) ; return Rcpp::wrap( fibonacci(x) ) ; &#39;) Note: This uses two key Rcpp tools, the converter functions as and wrap. as is used to convert the incoming argument xs from SEXP to integer. wrap converts the integer result in the integer variable x to the SEXP type. In incltxt, we define a C++ function fibonacci. cxxfunction: is used to turn code supplied as a text variable into an executable function. rbenchmark::benchmark(fibR(20), fibRcpp(20)) ## test replications elapsed relative user.self sys.self user.child sys.child ## 1 fibR(20) 100 0.474 237 0.470 0.003 0 0 ## 2 fibRcpp(20) 100 0.002 1 0.002 0.000 0 0 2.2.3 Using Rcpp Attributes One can simply declare certain “attributes,” notably whether a function is to be exported for use from R or from another C++ function (or both). One can declare dependencies whose resolution still relies on the plugin framework provided by inline. # in c1.2.cpp: # #include &lt;Rcpp.h&gt; # using namespace Rcpp; # # // [[Rcpp::export]] # int fibonacci(const int x) { # if (x&lt; 2) # return x; # else # return (fibonacci(x - 1)) + fibonacci(x - 2); # } sourceCpp(&quot;c++/c1.2.cpp&quot;) fibonacci(20) ## [1] 6765 Note: The [[Rcpp::export]] attribute preceds the function definition. The sourceCpp() reads the code from the given source file, parses it for the relevant attributes, and creates the required wrappers before calling R to compile and link just like inline does. "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
